using Microsoft.AspNetCore.Mvc;
using VulnManager.Models;
using VulnManager.Data;
using Microsoft.EntityFrameworkCore;
using VulnManager.Services;
using Microsoft.AspNetCore.Authorization;

namespace VulnManager.Controllers
{
    [Authorize]
    public class VulnerabilityController : Controller
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<VulnerabilityController> _logger;
        public VulnerabilityController(ApplicationDbContext context, ILogger<VulnerabilityController> logger)
        {
            _context = context;
            _logger = logger;
        }

        public IActionResult Index()
        {
            var vulns = _context.Vulnerabilities.Include(s=>s.Server).Include(c=>c.Cve).ToList();
            return View(vulns);
        }

        public async Task<IActionResult> Details(string id)
        {
            if (id == null)
            {
                return NotFound();
            }
            var vuln = _context.Vulnerabilities.Include(s => s.Server).Include(c => c.Cve).Where(s => s.Id == id).FirstOrDefault();
            if (vuln == null)
            {
                return NotFound();
            }
            return View(vuln);
        }

        public async Task<IActionResult> Edit(string id)
        {
            if (id == null)
            {
                return NotFound();
            }
            var vuln = _context.Vulnerabilities.Include(s => s.Server).Include(c => c.Cve).Where(s => s.Id == id).FirstOrDefault();
            if (vuln == null)
            {
                return NotFound();
            }
            return View(vuln);
        }

        [HttpPost]
        public async Task<IActionResult> ChangeState(string id, string newState)
        {
            var vuln = _context.Vulnerabilities.Where(v => v.Id == id).FirstOrDefault();
            if (newState == "notToFix")
            {
                vuln.VulnerabilityState = Vulnerability.State.NotToFix;
            }
            else if(newState == "fixed")
            {
                vuln.VulnerabilityState = Vulnerability.State.Fixed;
            }
            else if(newState == "falsePositive")
            {
                vuln.VulnerabilityState = Vulnerability.State.FalsePositive;
            }
            else
            {
                return NotFound();
            }
            _logger.LogInformation($"User changes state of {vuln.Id} at {DateTime.Now}");
            _context.Update(vuln);
            await _context.SaveChangesAsync();
            return RedirectToAction("Index");
        }
    }
}